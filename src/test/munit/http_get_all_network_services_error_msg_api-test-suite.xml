<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">
    <munit:config mock-connectors="false" mock-inbounds="false" name="munit" doc:name="MUnit configuration"/>
    <spring:beans>
        <spring:import resource="classpath:poc_nisc_service_assurance_system_api.xml"/>
        <spring:import resource="classpath:poc_nisc_service_assurance_system_api_config.xml"/>
        <spring:import resource="classpath:service_assurance_system_api_business.xml"/>
        <spring:import resource="classpath:messages-for-test-suite.xml"/>
    </spring:beans>
    <http:request-config name="HTTP_Raml_Test_Request_Configuration" host="localhost" port="${http.port}" basePath="/api" doc:name="HTTP Request Configuration">
        <http:raml-api-configuration location="poc_nisc_service_assurance_system_api.raml"/>
    </http:request-config>
    <http:request-config name="HTTP_Invalid_Request_Configuration" host="localhost" port="${http.port}" basePath="/api" doc:name="HTTP Request Configuration"/>
    <munit:before-test name="poc_nisc_service_delivery_system_api-test-suiteBefore_Test" description="Before tests actions">
        <flow-ref name="setExpectedVarErrorMessage400" doc:name="setExpectedVarErrorMessage400"/>
        <flow-ref name="setExpectedVarErrorMessage404" doc:name="setExpectedVarErrorMessage404"/>
        <flow-ref name="setExpectedVarErrorMessage405" doc:name="setExpectedVarErrorMessage405"/>
        <flow-ref name="setExpectedVarErrorMessage406" doc:name="setExpectedVarErrorMessage406"/>
        <flow-ref name="setExpectedVarErrorMessage500" doc:name="setExpectedVarErrorMessage500"/>
    </munit:before-test>
    <munit:test name="FuntionalTest-GivenAnInvalidRequestWhenGetAllANetworkServicesInfoThenReturnA400ErrorMessage" description="FuntionalTest-GivenAnInvalidRequestWhenGetAllANetworkServicesInfoThenReturnA400ErrorMessage">
        <munit:set payload="#[]" doc:name="Set Message"/>
        <munit:set-null-payload doc:name="Set Null Payload"/>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/network/service" method="GET" doc:name="HTTP-GET-ALL-NetworkServicesInfo">
            <http:request-builder>
                <http:query-param paramName="order" value="invalid"/>
            </http:request-builder>
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <byte-array-to-object-transformer doc:name="Byte Array to Object"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
        <munit:assert-payload-equals expectedValue="#[flowVars.errorMessage400]" doc:name="Assert Payload"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenAnInvalidRequestWhenGetAllANetworkServicesInfoThenVerifyThatTheRequestWasNotRoutedToAnImplementation" description="FuntionalTest-GivenAnInvalidRequestWhenGetAllANetworkServicesInfoThenVerifyThatTheRequestWasNotRoutedToAnImplementation">
        <munit:set payload="#[]" doc:name="Set Message"/>
        <munit:set-null-payload doc:name="Set Null Payload"/>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/network/service" method="GET" doc:name="HTTP-GET-ALL-NetworkServicesInfo">
            <http:request-builder>
                <http:query-param paramName="order" value="invalid"/>
            </http:request-builder>
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <mock:verify-call messageProcessor="mule:flow" times="0" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('get:/network/service:poc_nisc_service_assurance_system_api-config')]"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="FuntionalTest-GivenAnInvalidRequestWhenGetAllANetworkServicesInfoThenReturnAHTTPSTATUS400" description="FuntionalTest-GivenAnInvalidRequestWhenGetAllANetworkServicesInfoThenReturnAHTTPSTATUS400">
        <munit:set payload="#[]" doc:name="Set Message"/>
        <munit:set-null-payload doc:name="Set Null Payload"/>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/network/service" method="GET" doc:name="HTTP-GET-ALL-NetworkServicesInfo">
            <http:request-builder>
                <http:query-param paramName="order" value="invalid"/>
            </http:request-builder>
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <munit:assert-on-equals message="It is not the expected HTTP Status Code for the response" expectedValue="#[400]" actualValue="#[message.inboundProperties.'http.status']" doc:name="Assert Equals for Expected HTTP 400 Status Code Response"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenAnInvalidRequestWhenGetAllANetworkServicesInfoThenReturnExpectedContentType" description="FuntionalTest-GivenAnInvalidRequestWhenGetAllANetworkServicesInfoThenReturnExpectedContentType">
        <munit:set payload="#[]" doc:name="Set Message"/>
        <munit:set-null-payload doc:name="Set Null Payload"/>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/network/service" method="GET" doc:name="HTTP-GET-ALL-NetworkServicesInfo">
            <http:request-builder>
                <http:query-param paramName="order" value="invalid"/>
            </http:request-builder>
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <munit:assert-on-equals message="It is not the expected Content-Type for the response" expectedValue="#['application/json']" actualValue="#[message.inboundProperties.'Content-Type']" doc:name="Assert Equals for Expected Content-Type Response"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenARequestWhenCallInvalidGetAllANetworkServicesInfoThenReturnA404ErrorMessage" description="FuntionalTest-GivenARequestWhenCallInvalidGetAllANetworkServicesInfoThenReturnA404ErrorMessage">
        <http:request config-ref="HTTP_Invalid_Request_Configuration" path="/network/services" method="GET" doc:name="HTTP-GET-ALL-NetworkServicesInfo">
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <byte-array-to-object-transformer doc:name="Byte Array to Object"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
        <munit:assert-payload-equals expectedValue="#[flowVars.errorMessage404]" doc:name="Assert Payload"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenARequestWhenCallInvalidGetAllANetworkServicesInfoThenVerifyThatTheRequestWasNotRoutedToAnImplementation" description="FuntionalTest-GivenARequestWhenCallInvalidGetAllANetworkServicesInfoThenVerifyThatTheRequestWasNotRoutedToAnImplementation">
        <http:request config-ref="HTTP_Invalid_Request_Configuration" path="/network/services" method="GET" doc:name="HTTP-GET-ALL-NetworkServicesInfo">
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <mock:verify-call messageProcessor="mule:flow" times="0" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('get:/network/service:poc_nisc_service_assurance_system_api-config')]"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="FuntionalTest-GivenARequestWhenCallInvalidGetAllANetworkServicesInfoThenReturnAHTTPSTATUS404" description="FuntionalTest-GivenARequestWhenCallInvalidGetAllANetworkServicesInfoThenReturnAHTTPSTATUS404">
        <http:request config-ref="HTTP_Invalid_Request_Configuration" path="/network/services" method="GET" doc:name="HTTP-GET-ALL-NetworkServicesInfo">
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <munit:assert-on-equals message="It is not the expected HTTP Status Code for the response" expectedValue="#[404]" actualValue="#[message.inboundProperties.'http.status']" doc:name="Assert Equals for Expected HTTP 404 Status Code Response"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenARequestWhenCallInvalidGetAllANetworkServicesInfoThenReturnExpectedContentType" description="FuntionalTest-GivenARequestWhenCallInvalidGetAllANetworkServicesInfoThenReturnExpectedContentType">
        <http:request config-ref="HTTP_Invalid_Request_Configuration" path="/network/services" method="GET" doc:name="HTTP-GET-ALL-NetworkServicesInfo">
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <munit:assert-on-equals message="It is not the expected Content-Type for the response" expectedValue="#['application/json']" actualValue="#[message.inboundProperties.'Content-Type']" doc:name="Assert Equals for Expected Content-Type Response"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenARequestWhenPATCHGetAllANetworkServicesInfoThenReturnA405ErrorMessage" description="FuntionalTest-GivenARequestWhenPATCHGetAllANetworkServicesInfoThenReturnA405ErrorMessage">
        <http:request config-ref="HTTP_Invalid_Request_Configuration" path="/network/service" method="PATCH" doc:name="HTTP-GET-ALL-NetworkServicesInfo">
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <byte-array-to-object-transformer doc:name="Byte Array to Object"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
        <munit:assert-payload-equals expectedValue="#[flowVars.errorMessage405]" doc:name="Assert Payload"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenARequestWhenPATCHGetAllANetworkServicesInfoThenVerifyThatTheRequestWasNotRoutedToAnImplementation" description="FuntionalTest-GivenARequestWhenPATCHGetAllANetworkServicesInfoThenVerifyThatTheRequestWasNotRoutedToAnImplementation">
        <http:request config-ref="HTTP_Invalid_Request_Configuration" path="/network/service" method="PATCH" doc:name="HTTP-GET-ALL-NetworkServicesInfo">
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <mock:verify-call messageProcessor="mule:flow" times="0" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('get:/network/service:poc_nisc_service_assurance_system_api-config')]"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="FuntionalTest-GivenARequestWhenPATCHGetAllANetworkServicesInfoThenReturnAHTTPSTATUS405" description="FuntionalTest-GivenARequestWhenPATCHGetAllANetworkServicesInfoThenReturnAHTTPSTATUS405">
        <http:request config-ref="HTTP_Invalid_Request_Configuration" path="/network/service" method="PATCH" doc:name="HTTP-GET-ALL-NetworkServicesInfo">
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <munit:assert-on-equals message="It is not the expected HTTP Status Code for the response" expectedValue="#[405]" actualValue="#[message.inboundProperties.'http.status']" doc:name="Assert Equals for Expected HTTP 405 Status Code Response"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenARequestWhenPATCHGetAllANetworkServicesInfoThenReturnExpectedContentType" description="FuntionalTest-GivenARequestWhenPATCHGetAllANetworkServicesInfoThenReturnExpectedContentType">
        <http:request config-ref="HTTP_Invalid_Request_Configuration" path="/network/service" method="PATCH" doc:name="HTTP-GET-ALL-NetworkServicesInfo">
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <munit:assert-on-equals message="It is not the expected Content-Type for the response" expectedValue="#['application/json']" actualValue="#[message.inboundProperties.'Content-Type']" doc:name="Assert Equals for Expected Content-Type Response"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenAnInvalidAcceptContentTypeAsHeaderInRequestWhenGetAllANetworkServicesInfoThenReturnA406ErrorMessage" description="FuntionalTest-GivenAnInvalidAcceptContentTypeAsHeaderInRequestWhenGetAllANetworkServicesInfoThenReturnA406ErrorMessage">
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/network/service" method="GET" doc:name="HTTP-GET-ALL-NetworkServicesInfo">
            <http:request-builder>
                <http:header headerName="Accept" value="#['application/xml']"/>
            </http:request-builder>
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <byte-array-to-object-transformer doc:name="Byte Array to Object"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
        <munit:assert-payload-equals expectedValue="#[flowVars.errorMessage406]" doc:name="Assert Payload"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenAnInvalidAcceptContentTypeAsHeaderInRequestWhenGetAllANetworkServicesInfoThenVerifyThatTheRequestWasNotRoutedToAnImplementation" description="FuntionalTest-GivenAnInvalidAcceptContentTypeAsHeaderInRequestWhenGetAllANetworkServicesInfoThenVerifyThatTheRequestWasNotRoutedToAnImplementation">
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/network/service" method="GET" doc:name="HTTP-GET-ALL-NetworkServicesInfo">
            <http:request-builder>
                <http:header headerName="Accept" value="#['application/xml']"/>
            </http:request-builder>
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <mock:verify-call messageProcessor="mule:flow" times="0" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('get:/network/service:poc_nisc_service_assurance_system_api-config')]"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="FuntionalTest-GivenAnInvalidAcceptContentTypeAsHeaderInRequestWhenGetAllANetworkServicesInfoThenReturnAHTTPSTATUS406" description="FuntionalTest-GivenAnInvalidAcceptContentTypeAsHeaderInRequestWhenGetAllANetworkServicesInfoThenReturnAHTTPSTATUS406">
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/network/service" method="GET" doc:name="HTTP-GET-ALL-NetworkServicesInfo">
            <http:request-builder>
                <http:header headerName="Accept" value="#['application/xml']"/>
            </http:request-builder>
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <munit:assert-on-equals message="It is not the expected HTTP Status Code for the response" expectedValue="#[406]" actualValue="#[message.inboundProperties.'http.status']" doc:name="Assert Equals for Expected HTTP 406 Status Code Response"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenAnInvalidAcceptContentTypeAsHeaderInRequestWhenGetAllANetworkServicesInfoThenReturnExpectedContentType" description="FuntionalTest-GivenAnInvalidAcceptContentTypeAsHeaderInRequestWhenGetAllANetworkServicesInfoThenReturnExpectedContentType">
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/network/service" method="GET" doc:name="HTTP-GET-ALL-NetworkServicesInfo">
            <http:request-builder>
                <http:header headerName="Accept" value="#['application/xml']"/>
            </http:request-builder>
            <http:failure-status-code-validator values="500"/>
        </http:request>
        <munit:assert-on-equals message="It is not the expected Content-Type for the response" expectedValue="#['application/json']" actualValue="#[message.inboundProperties.'Content-Type']" doc:name="Assert Equals for Expected Content-Type Response"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenARequestWhenGetAllANetworkServicesInfoAndSometingFailThenReturnA500ErrorMessage" description="FuntionalTest-GivenARequestWhenGetAllANetworkServicesInfoAndSometingFailThenReturnA500ErrorMessage">
        <mock:throw-an exception-ref="#[new java.lang.Exception(&quot;Internal Server Error For Munit TEST.&quot;)]" whenCalling="mule:flow" doc:name="Throw an Exception when call - get:/network/service:poc_nisc_service_assurance_system_api-config">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('get:/network/service:poc_nisc_service_assurance_system_api-config')]"/>
            </mock:with-attributes>
        </mock:throw-an>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/network/service" method="GET" doc:name="HTTP-GET-ALL-NetworkServicesInfo">
            <http:failure-status-code-validator values="400"/>
        </http:request>
        <byte-array-to-object-transformer doc:name="Byte Array to Object"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
        <munit:assert-payload-equals expectedValue="#[flowVars.errorMessage500]" doc:name="Assert Payload"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenARequestWhenGetAllANetworkServicesInfoAndSometingFailThenVerifyThatTheRequestWasRoutedToAnImplementation" description="FuntionalTest-GivenARequestWhenGetAllANetworkServicesInfoAndSometingFailThenVerifyThatTheRequestWasRoutedToAnImplementation">
        <mock:throw-an exception-ref="#[new java.lang.Exception(&quot;Internal Server Error For Munit TEST.&quot;)]" whenCalling="mule:flow" doc:name="Throw an Exception when call - get:/network/service:poc_nisc_service_assurance_system_api-config">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('get:/network/service:poc_nisc_service_assurance_system_api-config')]"/>
            </mock:with-attributes>
        </mock:throw-an>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/network/service" method="GET" doc:name="HTTP-GET-ALL-NetworkServicesInfo">
            <http:failure-status-code-validator values="400"/>
        </http:request>
        <mock:verify-call messageProcessor="mule:flow" times="1" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('get:/network/service:poc_nisc_service_assurance_system_api-config')]"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="FuntionalTest-GivenARequestWhenGetAllANetworkServicesInfoAndSometingFailThenReturnAHTTPSTATUS500" description="FuntionalTest-GivenARequestWhenGetAllANetworkServicesInfoAndSometingFailThenReturnAHTTPSTATUS500">
        <mock:throw-an exception-ref="#[new java.lang.Exception(&quot;Internal Server Error For Munit TEST.&quot;)]" whenCalling="mule:flow" doc:name="Throw an Exception when call - get:/network/service:poc_nisc_service_assurance_system_api-config">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('get:/network/service:poc_nisc_service_assurance_system_api-config')]"/>
            </mock:with-attributes>
        </mock:throw-an>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/network/service" method="GET" doc:name="HTTP-GET-ALL-NetworkServicesInfo">
            <http:failure-status-code-validator values="400"/>
        </http:request>
        <munit:assert-on-equals message="It is not the expected HTTP Status Code for the response" expectedValue="#[500]" actualValue="#[message.inboundProperties.'http.status']" doc:name="Assert Equals for Expected HTTP 500 Status Code Response"/>
    </munit:test>
    <munit:test name="FuntionalTest-GivenARequestWhenGetAllANetworkServicesInfoAndSometingFailThenReturnExpectedContentType" description="FuntionalTest-GivenARequestWhenGetAllANetworkServicesInfoAndSometingFailThenReturnExpectedContentType">
        <mock:throw-an exception-ref="#[new java.lang.Exception(&quot;Internal Server Error For Munit TEST.&quot;)]" whenCalling="mule:flow" doc:name="Throw an Exception when call - get:/network/service:poc_nisc_service_assurance_system_api-config">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('get:/network/service:poc_nisc_service_assurance_system_api-config')]"/>
            </mock:with-attributes>
        </mock:throw-an>
        <http:request config-ref="HTTP_Raml_Test_Request_Configuration" path="/network/service" method="GET" doc:name="HTTP-GET-ALL-NetworkServicesInfo">
            <http:failure-status-code-validator values="400"/>
        </http:request>
        <munit:assert-on-equals message="It is not the expected Content-Type for the response" expectedValue="#['application/json']" actualValue="#[message.inboundProperties.'Content-Type']" doc:name="Assert Equals for Expected Content-Type Response"/>
    </munit:test>
</mule>
